from libexploit.io.stdout import init_logger


def int_to_x86_hex(v):
    return hex((v + (1 << 32)) % (1 << 32))


def calculate_x86_hex_offset(target, start='0x100000000'):
    # (str, str) -> (str, int)
    logger = init_logger()
    logger.debug('converting values to python ints')
    default = int('0x100000000', 16)
    int_start = int(start, 16)
    int_target = int(target, 16)
    logger.debug('beginning calculations')
    if int_start == default:
        logger.info('calculating offset between {s} and {t}'.format(
            s='0x00000000', t=target))
    else:
        logger.info('calculating offset between {s} and {t}'.format(
            s=int_to_x86_hex(v=int_start), t=int_to_x86_hex(v=int_target)))
    offset = int_start - int_target
    logger.info('offset is: {ho} hex or {do} decimal'.format(
        ho=int_to_x86_hex(v=offset), do=offset))
    return (int_to_x86_hex(v=offset), offset)


